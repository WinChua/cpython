/* File automatically generated by asdl_c.py. */

#ifndef Py_PYTHON_AST_H
#define Py_PYTHON_AST_H
#ifdef __cplusplus
extern "C" {
#endif

#ifndef Py_LIMITED_API
#include "asdl.h"

#undef Yield   /* undefine macro conflicting with <winbase.h> */

typedef struct _stm *stm_ty;

typedef struct _exp_list *exp_list_ty;

typedef struct _exp *exp_ty;

typedef enum _binop { Plus=1, Minus=2, Times=3, Div=4 } binop_ty;


enum _stm_kind {Compound_kind=1, Assign_kind=2, Print_kind=3};
struct _stm {
    enum _stm_kind kind;
    union {
        struct {
            stm_ty head;
            stm_ty next;
        } Compound;

        struct {
            identifier lval;
            exp_ty rval;
        } Assign;

        struct {
            exp_list_ty args;
        } Print;

    } v;
};

enum _exp_list_kind {ExpList_kind=1, Nil_kind=2};
struct _exp_list {
    enum _exp_list_kind kind;
    union {
        struct {
            exp_ty head;
            exp_list_ty next;
        } ExpList;

    } v;
};

enum _exp_kind {Id_kind=1, Num_kind=2, Op_kind=3};
struct _exp {
    enum _exp_kind kind;
    union {
        struct {
            identifier id;
        } Id;

        struct {
            int num;
        } Num;

        struct {
            exp_ty lval;
            binop_ty op;
            exp_ty rval;
        } Op;

    } v;
};


// Note: these macros affect function definitions, not only call sites.
#define Compound(a0, a1, a2) _Py_Compound(a0, a1, a2)
stm_ty _Py_Compound(stm_ty head, stm_ty next, PyArena *arena);
#define Assign(a0, a1, a2) _Py_Assign(a0, a1, a2)
stm_ty _Py_Assign(identifier lval, exp_ty rval, PyArena *arena);
#define Print(a0, a1) _Py_Print(a0, a1)
stm_ty _Py_Print(exp_list_ty args, PyArena *arena);
#define ExpList(a0, a1, a2) _Py_ExpList(a0, a1, a2)
exp_list_ty _Py_ExpList(exp_ty head, exp_list_ty next, PyArena *arena);
#define Nil(a0) _Py_Nil(a0)
exp_list_ty _Py_Nil(PyArena *arena);
#define Id(a0, a1) _Py_Id(a0, a1)
exp_ty _Py_Id(identifier id, PyArena *arena);
#define Num(a0, a1) _Py_Num(a0, a1)
exp_ty _Py_Num(int num, PyArena *arena);
#define Op(a0, a1, a2, a3) _Py_Op(a0, a1, a2, a3)
exp_ty _Py_Op(exp_ty lval, binop_ty op, exp_ty rval, PyArena *arena);

PyObject* PyAST_mod2obj(mod_ty t);
mod_ty PyAST_obj2mod(PyObject* ast, PyArena* arena, int mode);
int PyAST_Check(PyObject* obj);
#endif /* !Py_LIMITED_API */

#ifdef __cplusplus
}
#endif
#endif /* !Py_PYTHON_AST_H */
